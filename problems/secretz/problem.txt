一个加密的压缩的tar文件将被通过process.stdin导入，为了完成本次挑
战，对于tar包里面的每个文件，打印该文件内容加上一个空格再加上文
件名，然后一个换行符的16进制编码的md5哈希值。

你会收到process.argv[2]传入的口令名和process.argv[3]传入的口令密码。
你可以把这些参数直接传给`crypto.createDecipher()`。

内建的zlib库有一个`zlib.createGunzip()`函数，可以返回用于压缩的流。

`tar`模块有一个`tar.Parse()`函数，对于每个tar包的文件可以释放`'entry'`
事件。每个`entry`对象是一个该tar包中文件内容的可读流:

`entry.type`是文件的类型('File', 'Directory', 等等)
`entry.path`是文件的路径

通过如下方式使用tar模块：

    var tar = require('tar');
    var parser = tar.Parse();
    parser.on('entry', function (e) {
        console.dir(e);
    });
    var fs = require('fs');
    fs.createReadStream('file.tar').pipe(parser);

使用`crypto.createHash('md5', { encoding: 'hex' })`来为写入到其中的
值生成十六进制md5哈希值。
