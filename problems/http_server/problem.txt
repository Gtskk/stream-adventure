写一个使用through流的http服务端来将POST请求的数据转变为大写，然后
作为响应返回。

流不仅仅用来处理文本文件和stdin/stdout。你知道来自node核心库
`http.createServer()`的http请求和响应对象也是流吗？

比如，我们可以将一个文件导出到响应对象：

    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        fs.createReadStream('file.txt').pipe(res);
    });
    server.listen(process.argv[2]);

这是极好的，因为我们的服务端可以直接响应而无需先将数据缓存到内存中。

我们也可以将文件数据导入到请求对象：

    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        if (req.method === 'POST') {
            req.pipe(fs.createWriteStream('post.txt'));
        }
        res.end('beep boop\n');
    });
    server.listen(process.argv[2]);

你可以通过curl测试post服务端：

    $ node server.js 8000 &
    $ echo hack the planet | curl -d@- http://localhost:8000
    beep boop
    $ cat post.txt
    hack the planet

你的http服务端应该监听process.argv[2]给定的端口，并且参照TRANSFORM
的例子将POST数据转换为大写。

下面是一个利用默认的through2回调函数的例子：

    var through = require('through2');
    process.stdin.pipe(through(write, end)).pipe(process.stdout);

    function write (buf, _, next) {
      this.push(buf);
      next();
    }
    function end (done) { done(); }
